/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app.index'
import { Route as AppSpacesIndexRouteImport } from './routes/_app.spaces.index'
import { Route as AppChatsIndexRouteImport } from './routes/_app.chats.index'
import { Route as AppSpacesSpaceIdRouteImport } from './routes/_app.spaces.$spaceId'
import { Route as AppItemsIdRouteImport } from './routes/_app.items.$id'
import { Route as AppChatsIdRouteImport } from './routes/_app.chats.$id'
import { Route as AppSpacesSpaceIdIndexRouteImport } from './routes/_app.spaces.$spaceId.index'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppSpacesIndexRoute = AppSpacesIndexRouteImport.update({
  id: '/spaces/',
  path: '/spaces/',
  getParentRoute: () => AppRoute,
} as any)
const AppChatsIndexRoute = AppChatsIndexRouteImport.update({
  id: '/chats/',
  path: '/chats/',
  getParentRoute: () => AppRoute,
} as any)
const AppSpacesSpaceIdRoute = AppSpacesSpaceIdRouteImport.update({
  id: '/spaces/$spaceId',
  path: '/spaces/$spaceId',
  getParentRoute: () => AppRoute,
} as any)
const AppItemsIdRoute = AppItemsIdRouteImport.update({
  id: '/items/$id',
  path: '/items/$id',
  getParentRoute: () => AppRoute,
} as any)
const AppChatsIdRoute = AppChatsIdRouteImport.update({
  id: '/chats/$id',
  path: '/chats/$id',
  getParentRoute: () => AppRoute,
} as any)
const AppSpacesSpaceIdIndexRoute = AppSpacesSpaceIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppSpacesSpaceIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRoute
  '/': typeof AppIndexRoute
  '/chats/$id': typeof AppChatsIdRoute
  '/items/$id': typeof AppItemsIdRoute
  '/spaces/$spaceId': typeof AppSpacesSpaceIdRouteWithChildren
  '/chats': typeof AppChatsIndexRoute
  '/spaces': typeof AppSpacesIndexRoute
  '/spaces/$spaceId/': typeof AppSpacesSpaceIdIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRoute
  '/': typeof AppIndexRoute
  '/chats/$id': typeof AppChatsIdRoute
  '/items/$id': typeof AppItemsIdRoute
  '/chats': typeof AppChatsIndexRoute
  '/spaces': typeof AppSpacesIndexRoute
  '/spaces/$spaceId': typeof AppSpacesSpaceIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/auth': typeof AuthRoute
  '/_app/': typeof AppIndexRoute
  '/_app/chats/$id': typeof AppChatsIdRoute
  '/_app/items/$id': typeof AppItemsIdRoute
  '/_app/spaces/$spaceId': typeof AppSpacesSpaceIdRouteWithChildren
  '/_app/chats/': typeof AppChatsIndexRoute
  '/_app/spaces/': typeof AppSpacesIndexRoute
  '/_app/spaces/$spaceId/': typeof AppSpacesSpaceIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/'
    | '/chats/$id'
    | '/items/$id'
    | '/spaces/$spaceId'
    | '/chats'
    | '/spaces'
    | '/spaces/$spaceId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/'
    | '/chats/$id'
    | '/items/$id'
    | '/chats'
    | '/spaces'
    | '/spaces/$spaceId'
  id:
    | '__root__'
    | '/_app'
    | '/auth'
    | '/_app/'
    | '/_app/chats/$id'
    | '/_app/items/$id'
    | '/_app/spaces/$spaceId'
    | '/_app/chats/'
    | '/_app/spaces/'
    | '/_app/spaces/$spaceId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/spaces/': {
      id: '/_app/spaces/'
      path: '/spaces'
      fullPath: '/spaces'
      preLoaderRoute: typeof AppSpacesIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/chats/': {
      id: '/_app/chats/'
      path: '/chats'
      fullPath: '/chats'
      preLoaderRoute: typeof AppChatsIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/spaces/$spaceId': {
      id: '/_app/spaces/$spaceId'
      path: '/spaces/$spaceId'
      fullPath: '/spaces/$spaceId'
      preLoaderRoute: typeof AppSpacesSpaceIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/items/$id': {
      id: '/_app/items/$id'
      path: '/items/$id'
      fullPath: '/items/$id'
      preLoaderRoute: typeof AppItemsIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/chats/$id': {
      id: '/_app/chats/$id'
      path: '/chats/$id'
      fullPath: '/chats/$id'
      preLoaderRoute: typeof AppChatsIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/spaces/$spaceId/': {
      id: '/_app/spaces/$spaceId/'
      path: '/'
      fullPath: '/spaces/$spaceId/'
      preLoaderRoute: typeof AppSpacesSpaceIdIndexRouteImport
      parentRoute: typeof AppSpacesSpaceIdRoute
    }
  }
}

interface AppSpacesSpaceIdRouteChildren {
  AppSpacesSpaceIdIndexRoute: typeof AppSpacesSpaceIdIndexRoute
}

const AppSpacesSpaceIdRouteChildren: AppSpacesSpaceIdRouteChildren = {
  AppSpacesSpaceIdIndexRoute: AppSpacesSpaceIdIndexRoute,
}

const AppSpacesSpaceIdRouteWithChildren =
  AppSpacesSpaceIdRoute._addFileChildren(AppSpacesSpaceIdRouteChildren)

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppChatsIdRoute: typeof AppChatsIdRoute
  AppItemsIdRoute: typeof AppItemsIdRoute
  AppSpacesSpaceIdRoute: typeof AppSpacesSpaceIdRouteWithChildren
  AppChatsIndexRoute: typeof AppChatsIndexRoute
  AppSpacesIndexRoute: typeof AppSpacesIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppChatsIdRoute: AppChatsIdRoute,
  AppItemsIdRoute: AppItemsIdRoute,
  AppSpacesSpaceIdRoute: AppSpacesSpaceIdRouteWithChildren,
  AppChatsIndexRoute: AppChatsIndexRoute,
  AppSpacesIndexRoute: AppSpacesIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
