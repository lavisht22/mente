/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppFRouteImport } from './routes/_app._f'
import { Route as AppChatsIndexRouteImport } from './routes/_app.chats.index'
import { Route as AppFIndexRouteImport } from './routes/_app._f.index'
import { Route as AppChatsIdRouteImport } from './routes/_app.chats.$id'
import { Route as AppFSpacesIndexRouteImport } from './routes/_app._f.spaces.index'
import { Route as AppFSpacesIdRouteImport } from './routes/_app._f.spaces.$id'
import { Route as AppFItemsIdRouteImport } from './routes/_app._f.items.$id'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppFRoute = AppFRouteImport.update({
  id: '/_f',
  getParentRoute: () => AppRoute,
} as any)
const AppChatsIndexRoute = AppChatsIndexRouteImport.update({
  id: '/chats/',
  path: '/chats/',
  getParentRoute: () => AppRoute,
} as any)
const AppFIndexRoute = AppFIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppFRoute,
} as any)
const AppChatsIdRoute = AppChatsIdRouteImport.update({
  id: '/chats/$id',
  path: '/chats/$id',
  getParentRoute: () => AppRoute,
} as any)
const AppFSpacesIndexRoute = AppFSpacesIndexRouteImport.update({
  id: '/spaces/',
  path: '/spaces/',
  getParentRoute: () => AppFRoute,
} as any)
const AppFSpacesIdRoute = AppFSpacesIdRouteImport.update({
  id: '/spaces/$id',
  path: '/spaces/$id',
  getParentRoute: () => AppFRoute,
} as any)
const AppFItemsIdRoute = AppFItemsIdRouteImport.update({
  id: '/items/$id',
  path: '/items/$id',
  getParentRoute: () => AppFRoute,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRoute
  '/chats/$id': typeof AppChatsIdRoute
  '/': typeof AppFIndexRoute
  '/chats': typeof AppChatsIndexRoute
  '/items/$id': typeof AppFItemsIdRoute
  '/spaces/$id': typeof AppFSpacesIdRoute
  '/spaces': typeof AppFSpacesIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRoute
  '/chats/$id': typeof AppChatsIdRoute
  '/': typeof AppFIndexRoute
  '/chats': typeof AppChatsIndexRoute
  '/items/$id': typeof AppFItemsIdRoute
  '/spaces/$id': typeof AppFSpacesIdRoute
  '/spaces': typeof AppFSpacesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/auth': typeof AuthRoute
  '/_app/_f': typeof AppFRouteWithChildren
  '/_app/chats/$id': typeof AppChatsIdRoute
  '/_app/_f/': typeof AppFIndexRoute
  '/_app/chats/': typeof AppChatsIndexRoute
  '/_app/_f/items/$id': typeof AppFItemsIdRoute
  '/_app/_f/spaces/$id': typeof AppFSpacesIdRoute
  '/_app/_f/spaces/': typeof AppFSpacesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/chats/$id'
    | '/'
    | '/chats'
    | '/items/$id'
    | '/spaces/$id'
    | '/spaces'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/chats/$id'
    | '/'
    | '/chats'
    | '/items/$id'
    | '/spaces/$id'
    | '/spaces'
  id:
    | '__root__'
    | '/_app'
    | '/auth'
    | '/_app/_f'
    | '/_app/chats/$id'
    | '/_app/_f/'
    | '/_app/chats/'
    | '/_app/_f/items/$id'
    | '/_app/_f/spaces/$id'
    | '/_app/_f/spaces/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/_f': {
      id: '/_app/_f'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppFRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/chats/': {
      id: '/_app/chats/'
      path: '/chats'
      fullPath: '/chats'
      preLoaderRoute: typeof AppChatsIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/_f/': {
      id: '/_app/_f/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppFIndexRouteImport
      parentRoute: typeof AppFRoute
    }
    '/_app/chats/$id': {
      id: '/_app/chats/$id'
      path: '/chats/$id'
      fullPath: '/chats/$id'
      preLoaderRoute: typeof AppChatsIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/_f/spaces/': {
      id: '/_app/_f/spaces/'
      path: '/spaces'
      fullPath: '/spaces'
      preLoaderRoute: typeof AppFSpacesIndexRouteImport
      parentRoute: typeof AppFRoute
    }
    '/_app/_f/spaces/$id': {
      id: '/_app/_f/spaces/$id'
      path: '/spaces/$id'
      fullPath: '/spaces/$id'
      preLoaderRoute: typeof AppFSpacesIdRouteImport
      parentRoute: typeof AppFRoute
    }
    '/_app/_f/items/$id': {
      id: '/_app/_f/items/$id'
      path: '/items/$id'
      fullPath: '/items/$id'
      preLoaderRoute: typeof AppFItemsIdRouteImport
      parentRoute: typeof AppFRoute
    }
  }
}

interface AppFRouteChildren {
  AppFIndexRoute: typeof AppFIndexRoute
  AppFItemsIdRoute: typeof AppFItemsIdRoute
  AppFSpacesIdRoute: typeof AppFSpacesIdRoute
  AppFSpacesIndexRoute: typeof AppFSpacesIndexRoute
}

const AppFRouteChildren: AppFRouteChildren = {
  AppFIndexRoute: AppFIndexRoute,
  AppFItemsIdRoute: AppFItemsIdRoute,
  AppFSpacesIdRoute: AppFSpacesIdRoute,
  AppFSpacesIndexRoute: AppFSpacesIndexRoute,
}

const AppFRouteWithChildren = AppFRoute._addFileChildren(AppFRouteChildren)

interface AppRouteChildren {
  AppFRoute: typeof AppFRouteWithChildren
  AppChatsIdRoute: typeof AppChatsIdRoute
  AppChatsIndexRoute: typeof AppChatsIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppFRoute: AppFRouteWithChildren,
  AppChatsIdRoute: AppChatsIdRoute,
  AppChatsIndexRoute: AppChatsIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
